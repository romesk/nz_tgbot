from aiogram import types
from aiogram.dispatcher import FSMContext

from src import states
from src.services import api_calls
from src.keyboards import generate_login_kb
from src.services.db import db_calls


async def bot_start(message: types.Message):
    welcome_msg = "üëã –í—ñ—Ç–∞—é —É –±–æ—Ç—ñ NzUa. –ì–æ–ª–æ–≤–Ω–∞ —Ü—ñ–ª—å - –∑—Ä–æ–±–∏—Ç–∏ –∑—Ä—É—á–Ω–æ–≥–æ –¢–µ–ª–µ–≥—Ä–∞–º –ø–æ–º—ñ—á–Ω–∏–∫–∞, " \
                  "—â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –æ—Å–Ω–æ–≤–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ nz.ua —É —Ç–≤–æ—î–º—É —É–ª—é–±–ª–µ–Ω–æ–º—É –º–µ—Å–µ–Ω–¥–∂–µ—Ä—ñ ü§© –¢–æ –∂ –Ω–µ –∑–≤–æ–ª—ñ–∫–∞–π —ñ " \
                  "—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ! üòé"

    await message.answer(welcome_msg, reply_markup=await generate_login_kb(btn_text="–£–≤—ñ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç"))


async def ask_username(call: types.CallbackQuery):
    await call.message.edit_reply_markup()
    await call.message.answer("–í–≤–µ–¥–∏ —Å–≤—ñ–π –ª–æ–≥—ñ–Ω üßê")

    await states.EnterLoginData.username.set()


async def ask_password(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)

    await message.answer("–í–≤–µ–¥–∏ —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å üîê")
    await states.EnterLoginData.next()


async def finish_login(message: types.Message, state: FSMContext):

    password = message.text
    async with state.proxy() as data:
        username = data.get("username")

    auth_response = await api_calls.authentificate(username, password)

    err_msg = auth_response['error_message']

    if not err_msg:
        access_token = auth_response['access_token']
        await message.answer(f"–í–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ üîì\n<i>–©–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É —É –±–µ–∑–ø–µ—Ü—ñ, —Ç–∏ –º–æ–∂–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏ "
                             f"—ó—Ö –∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ </i>")
        await message.answer(f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {auth_response['FIO']} üòÅ")

        await db_calls.add_user(message=message, login=username, password=password, access_token=access_token)

    else:
        await message.answer(f"{err_msg} üôÅ", reply_markup=await generate_login_kb(btn_text="–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑"))
        await db_calls.add_user(message=message)

    await state.finish()
